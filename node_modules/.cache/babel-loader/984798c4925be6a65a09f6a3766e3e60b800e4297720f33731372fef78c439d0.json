{"ast":null,"code":"var _jsxFileName = \"D:\\\\DBVision\\\\dbvision\\\\src\\\\components\\\\SgbdOverview.jsx\",\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport SgbdMetricsChart from './SgbdMetricsChart'; // Import the chart component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SgbdOverview = () => {\n  _s2();\n  var _s = $RefreshSig$();\n  const [sgbdData, setSgbdData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [historicalDiskUsage, setHistoricalDiskUsage] = useState([]);\n  const [slowQueries, setSlowQueries] = useState([]);\n  const [queryWaitTimes, setQueryWaitTimes] = useState([]);\n  const [queryContention, setQueryContention] = useState([]);\n  _s(useEffect(_s(() => {\n    _s();\n    const fetchNetworkTraffic = () => {\n      fetch(`http://localhost:5000/api/network-traffic?host=${host}&username=${username}&password=${password}`).then(response => response.json()).then(data => {\n        if (data.success) {\n          setNetworkTraffic(data.networkTraffic);\n        }\n      }).catch(err => console.error('Error fetching network traffic:', err));\n    };\n    const fetchInnodbMetrics = () => {\n      fetch(`http://localhost:5000/api/innodb-metrics?host=${host}&username=${username}&password=${password}`).then(response => response.json()).then(data => {\n        if (data.success) {\n          setInnodbMetrics(data.innodbMetrics);\n        }\n      }).catch(err => console.error('Error fetching InnoDB metrics:', err));\n    };\n    useEffect(() => {\n      const credentials = JSON.parse(localStorage.getItem('dbCredentials'));\n      if (credentials) {\n        const {\n          host,\n          username,\n          password\n        } = credentials;\n        fetchPerformanceMetrics();\n        fetchDiskIO();\n        fetchNetworkTraffic();\n        fetchInnodbMetrics();\n      }\n    }, []);\n    const fetchData = async () => {\n      try {\n        const dbCredentials = JSON.parse(localStorage.getItem('dbCredentials'));\n        const response = await axios.get('http://localhost:5000/api/sgbd-overview', {\n          params: {\n            host: dbCredentials.host,\n            username: dbCredentials.username,\n            password: dbCredentials.password\n          }\n        });\n        setSgbdData(response.data.sgbd);\n      } catch (error) {\n        console.error('Error fetching SGBD data:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, \"OD7bBpZva5O2jO+Puf00hKivP7c=\"), []), \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"SGBD Overview\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), sgbdData ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Version:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 14\n        }, this), \" \", sgbdData.version]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Uptime:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 14\n        }, this), \" \", sgbdData.uptime, \" seconds\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Total Queries:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 14\n        }, this), \" \", sgbdData.totalQueries]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Open Tables:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 14\n        }, this), \" \", sgbdData.openTables]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(SgbdMetricsChart, {\n        data: sgbdData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Failed to load data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_s2(SgbdOverview, \"o2p/EacC5Nltpa8hicNgNCcP2qY=\");\n_c = SgbdOverview;\nexport default SgbdOverview;\nvar _c;\n$RefreshReg$(_c, \"SgbdOverview\");","map":{"version":3,"names":["React","useEffect","useState","axios","SgbdMetricsChart","jsxDEV","_jsxDEV","SgbdOverview","_s2","_s","$RefreshSig$","sgbdData","setSgbdData","loading","setLoading","historicalDiskUsage","setHistoricalDiskUsage","slowQueries","setSlowQueries","queryWaitTimes","setQueryWaitTimes","queryContention","setQueryContention","fetchNetworkTraffic","fetch","host","username","password","then","response","json","data","success","setNetworkTraffic","networkTraffic","catch","err","console","error","fetchInnodbMetrics","setInnodbMetrics","innodbMetrics","credentials","JSON","parse","localStorage","getItem","fetchPerformanceMetrics","fetchDiskIO","fetchData","dbCredentials","get","params","sgbd","children","fileName","_jsxFileName","lineNumber","columnNumber","version","uptime","totalQueries","openTables","_c","$RefreshReg$"],"sources":["D:/DBVision/dbvision/src/components/SgbdOverview.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport SgbdMetricsChart from './SgbdMetricsChart'; // Import the chart component\r\n\r\nconst SgbdOverview = () => {\r\n  const [sgbdData, setSgbdData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [historicalDiskUsage, setHistoricalDiskUsage] = useState([]);\r\n  const [slowQueries, setSlowQueries] = useState([]);\r\n  const [queryWaitTimes, setQueryWaitTimes] = useState([]);\r\n  const [queryContention, setQueryContention] = useState([]);\r\n\r\n  useEffect(() => {\r\n   \r\n      \r\n      const fetchNetworkTraffic = () => {\r\n        fetch(`http://localhost:5000/api/network-traffic?host=${host}&username=${username}&password=${password}`)\r\n          .then((response) => response.json())\r\n          .then((data) => {\r\n            if (data.success) {\r\n              setNetworkTraffic(data.networkTraffic);\r\n            }\r\n          })\r\n          .catch((err) => console.error('Error fetching network traffic:', err));\r\n      };\r\n      \r\n      const fetchInnodbMetrics = () => {\r\n        fetch(`http://localhost:5000/api/innodb-metrics?host=${host}&username=${username}&password=${password}`)\r\n          .then((response) => response.json())\r\n          .then((data) => {\r\n            if (data.success) {\r\n              setInnodbMetrics(data.innodbMetrics);\r\n            }\r\n          })\r\n          .catch((err) => console.error('Error fetching InnoDB metrics:', err));\r\n      };\r\n      \r\n      useEffect(() => {\r\n        const credentials = JSON.parse(localStorage.getItem('dbCredentials'));\r\n        if (credentials) {\r\n          const { host, username, password } = credentials;\r\n          fetchPerformanceMetrics();\r\n          fetchDiskIO();\r\n          fetchNetworkTraffic();\r\n          fetchInnodbMetrics();\r\n        }\r\n      }, []);\r\n    const fetchData = async () => {\r\n      try {\r\n        const dbCredentials = JSON.parse(localStorage.getItem('dbCredentials'));\r\n        const response = await axios.get('http://localhost:5000/api/sgbd-overview', {\r\n          params: { host: dbCredentials.host, username: dbCredentials.username, password: dbCredentials.password },\r\n        });\r\n        setSgbdData(response.data.sgbd);\r\n      } catch (error) {\r\n        console.error('Error fetching SGBD data:', error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>SGBD Overview</h1>\r\n      {sgbdData ? (\r\n        <div>\r\n          {/* Display SGBD Data */}\r\n          <p><strong>Version:</strong> {sgbdData.version}</p>\r\n          <p><strong>Uptime:</strong> {sgbdData.uptime} seconds</p>\r\n          <p><strong>Total Queries:</strong> {sgbdData.totalQueries}</p>\r\n          <p><strong>Open Tables:</strong> {sgbdData.openTables}</p>\r\n          \r\n          {/* Add the chart below the SGBD data */}\r\n          <SgbdMetricsChart data={sgbdData} />\r\n        </div>\r\n      ) : (\r\n        <p>Failed to load data</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SgbdOverview;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}