{"ast":null,"code":"useEffect(() => {\n  const credentials = JSON.parse(localStorage.getItem('dbCredentials'));\n  if (credentials) {\n    const {\n      host,\n      username,\n      password,\n      database\n    } = credentials;\n    fetch(`http://localhost:5000/api/database-metrics?host=${host}&username=${username}&password=${password}&database=${database}`).then(response => response.json()).then(data => {\n      console.log('Fetched data:', data);\n      if (data.success && data.metrics.length > 0) {\n        const metrics = data.metrics;\n        setData(metrics);\n        setChartData({\n          barChart: {\n            series: [{\n              name: 'Row Count',\n              data: metrics.map(item => item.value)\n            }],\n            options: {\n              ...chartData.barChart.options,\n              xaxis: {\n                categories: metrics.map(item => item.name)\n              }\n            }\n          },\n          lineChart: {\n            series: [{\n              name: 'Row Count',\n              data: metrics.map(item => item.value)\n            }],\n            options: {\n              ...chartData.lineChart.options,\n              xaxis: {\n                categories: metrics.map(item => item.name)\n              }\n            }\n          },\n          pieChart: {\n            series: metrics.map(item => item.value),\n            options: {\n              ...chartData.pieChart.options,\n              labels: metrics.map(item => item.name)\n            }\n          }\n        });\n      } else {\n        setData([]);\n        console.error('No metrics data received or API returned an error');\n      }\n    }).catch(err => console.error('Error fetching data:', err));\n  }\n}, []);","map":{"version":3,"names":["useEffect","credentials","JSON","parse","localStorage","getItem","host","username","password","database","fetch","then","response","json","data","console","log","success","metrics","length","setData","setChartData","barChart","series","name","map","item","value","options","chartData","xaxis","categories","lineChart","pieChart","labels","error","catch","err"],"sources":["D:/DBVision/dbvision/src/components/MainPage.jsx"],"sourcesContent":["useEffect(() => {\r\n  const credentials = JSON.parse(localStorage.getItem('dbCredentials'));\r\n  if (credentials) {\r\n    const { host, username, password, database } = credentials;\r\n    fetch(`http://localhost:5000/api/database-metrics?host=${host}&username=${username}&password=${password}&database=${database}`)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log('Fetched data:', data);\r\n        if (data.success && data.metrics.length > 0) {\r\n          const metrics = data.metrics;\r\n          setData(metrics);\r\n          setChartData({\r\n            barChart: {\r\n              series: [{ name: 'Row Count', data: metrics.map((item) => item.value) }],\r\n              options: {\r\n                ...chartData.barChart.options,\r\n                xaxis: { categories: metrics.map((item) => item.name) },\r\n              },\r\n            },\r\n            lineChart: {\r\n              series: [{ name: 'Row Count', data: metrics.map((item) => item.value) }],\r\n              options: {\r\n                ...chartData.lineChart.options,\r\n                xaxis: { categories: metrics.map((item) => item.name) },\r\n              },\r\n            },\r\n            pieChart: {\r\n              series: metrics.map((item) => item.value),\r\n              options: {\r\n                ...chartData.pieChart.options,\r\n                labels: metrics.map((item) => item.name),\r\n              },\r\n            },\r\n          });\r\n        } else {\r\n          setData([]);\r\n          console.error('No metrics data received or API returned an error');\r\n        }\r\n      })\r\n      .catch((err) => console.error('Error fetching data:', err));\r\n  }\r\n}, []);\r\n"],"mappings":"AAAAA,SAAS,CAAC,MAAM;EACd,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC,CAAC;EACrE,IAAIJ,WAAW,EAAE;IACf,MAAM;MAAEK,IAAI;MAAEC,QAAQ;MAAEC,QAAQ;MAAEC;IAAS,CAAC,GAAGR,WAAW;IAC1DS,KAAK,CAAC,mDAAmDJ,IAAI,aAAaC,QAAQ,aAAaC,QAAQ,aAAaC,QAAQ,EAAE,CAAC,CAC5HE,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAK;MACdC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEF,IAAI,CAAC;MAClC,IAAIA,IAAI,CAACG,OAAO,IAAIH,IAAI,CAACI,OAAO,CAACC,MAAM,GAAG,CAAC,EAAE;QAC3C,MAAMD,OAAO,GAAGJ,IAAI,CAACI,OAAO;QAC5BE,OAAO,CAACF,OAAO,CAAC;QAChBG,YAAY,CAAC;UACXC,QAAQ,EAAE;YACRC,MAAM,EAAE,CAAC;cAAEC,IAAI,EAAE,WAAW;cAAEV,IAAI,EAAEI,OAAO,CAACO,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,KAAK;YAAE,CAAC,CAAC;YACxEC,OAAO,EAAE;cACP,GAAGC,SAAS,CAACP,QAAQ,CAACM,OAAO;cAC7BE,KAAK,EAAE;gBAAEC,UAAU,EAAEb,OAAO,CAACO,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACF,IAAI;cAAE;YACxD;UACF,CAAC;UACDQ,SAAS,EAAE;YACTT,MAAM,EAAE,CAAC;cAAEC,IAAI,EAAE,WAAW;cAAEV,IAAI,EAAEI,OAAO,CAACO,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,KAAK;YAAE,CAAC,CAAC;YACxEC,OAAO,EAAE;cACP,GAAGC,SAAS,CAACG,SAAS,CAACJ,OAAO;cAC9BE,KAAK,EAAE;gBAAEC,UAAU,EAAEb,OAAO,CAACO,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACF,IAAI;cAAE;YACxD;UACF,CAAC;UACDS,QAAQ,EAAE;YACRV,MAAM,EAAEL,OAAO,CAACO,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,KAAK,CAAC;YACzCC,OAAO,EAAE;cACP,GAAGC,SAAS,CAACI,QAAQ,CAACL,OAAO;cAC7BM,MAAM,EAAEhB,OAAO,CAACO,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACF,IAAI;YACzC;UACF;QACF,CAAC,CAAC;MACJ,CAAC,MAAM;QACLJ,OAAO,CAAC,EAAE,CAAC;QACXL,OAAO,CAACoB,KAAK,CAAC,mDAAmD,CAAC;MACpE;IACF,CAAC,CAAC,CACDC,KAAK,CAAEC,GAAG,IAAKtB,OAAO,CAACoB,KAAK,CAAC,sBAAsB,EAAEE,GAAG,CAAC,CAAC;EAC/D;AACF,CAAC,EAAE,EAAE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}