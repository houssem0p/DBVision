{"ast":null,"code":"var _jsxFileName = \"D:\\\\DBVision\\\\dbvision\\\\src\\\\components\\\\SgbdOverview.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport SgbdMetricsChart from './SgbdMetricsChart'; // Import the chart component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SgbdOverview = () => {\n  _s();\n  const [sgbdData, setSgbdData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [performanceMetrics, setPerformanceMetrics] = useState(null);\n  const [diskIO, setDiskIO] = useState([]);\n  const [networkTraffic, setNetworkTraffic] = useState([]);\n  const [innodbMetrics, setInnodbMetrics] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      const credentials = JSON.parse(localStorage.getItem('dbCredentials'));\n      if (credentials) {\n        const {\n          host,\n          username,\n          password\n        } = credentials;\n        try {\n          const performanceResponse = await axios.get('http://localhost:5000/api/performance-metrics', {\n            params: {\n              host,\n              username,\n              password\n            }\n          });\n          if (performanceResponse.data.success) {\n            setPerformanceMetrics(performanceResponse.data);\n          }\n          const diskIOResponse = await axios.get('http://localhost:5000/api/disk-io', {\n            params: {\n              host,\n              username,\n              password\n            }\n          });\n          if (diskIOResponse.data.success) {\n            setDiskIO(diskIOResponse.data.diskIO);\n          }\n          const networkTrafficResponse = await axios.get('http://localhost:5000/api/network-traffic', {\n            params: {\n              host,\n              username,\n              password\n            }\n          });\n          if (networkTrafficResponse.data.success) {\n            setNetworkTraffic(networkTrafficResponse.data.networkTraffic);\n          }\n          const innodbMetricsResponse = await axios.get('http://localhost:5000/api/innodb-metrics', {\n            params: {\n              host,\n              username,\n              password\n            }\n          });\n          if (innodbMetricsResponse.data.success) {\n            setInnodbMetrics(innodbMetricsResponse.data.innodbMetrics);\n          }\n        } catch (error) {\n          console.error('Error fetching SGBD data:', error);\n        } finally {\n          setLoading(false);\n        }\n      }\n    };\n    fetchData();\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"SGBD Overview\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), performanceMetrics ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Threads Connected:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 14\n        }, this), \" \", performanceMetrics.database.threadsConnected]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Total Connections:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 14\n        }, this), \" \", performanceMetrics.database.totalConnections]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Uptime:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 14\n        }, this), \" \", performanceMetrics.database.uptimeSeconds, \" seconds\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Memory Usage:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 14\n        }, this), \" \", (performanceMetrics.system.memoryUsage.used / performanceMetrics.system.memoryUsage.total * 100).toFixed(2), \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"CPU Load:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 14\n        }, this), \" \", performanceMetrics.system.cpuLoad, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(SgbdMetricsChart, {\n        data: sgbdData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Failed to load data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(SgbdOverview, \"yH7RkXJhxZ2lNAUJdMfQLV/tlDE=\");\n_c = SgbdOverview;\nexport default SgbdOverview;\nvar _c;\n$RefreshReg$(_c, \"SgbdOverview\");","map":{"version":3,"names":["React","useEffect","useState","axios","SgbdMetricsChart","jsxDEV","_jsxDEV","SgbdOverview","_s","sgbdData","setSgbdData","loading","setLoading","performanceMetrics","setPerformanceMetrics","diskIO","setDiskIO","networkTraffic","setNetworkTraffic","innodbMetrics","setInnodbMetrics","fetchData","credentials","JSON","parse","localStorage","getItem","host","username","password","performanceResponse","get","params","data","success","diskIOResponse","networkTrafficResponse","innodbMetricsResponse","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","database","threadsConnected","totalConnections","uptimeSeconds","system","memoryUsage","used","total","toFixed","cpuLoad","_c","$RefreshReg$"],"sources":["D:/DBVision/dbvision/src/components/SgbdOverview.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport SgbdMetricsChart from './SgbdMetricsChart'; // Import the chart component\r\n\r\nconst SgbdOverview = () => {\r\n  const [sgbdData, setSgbdData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [performanceMetrics, setPerformanceMetrics] = useState(null);\r\n  const [diskIO, setDiskIO] = useState([]);\r\n  const [networkTraffic, setNetworkTraffic] = useState([]);\r\n  const [innodbMetrics, setInnodbMetrics] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const credentials = JSON.parse(localStorage.getItem('dbCredentials'));\r\n      if (credentials) {\r\n        const { host, username, password } = credentials;\r\n\r\n        try {\r\n          const performanceResponse = await axios.get('http://localhost:5000/api/performance-metrics', {\r\n            params: { host, username, password },\r\n          });\r\n          if (performanceResponse.data.success) {\r\n            setPerformanceMetrics(performanceResponse.data);\r\n          }\r\n\r\n          const diskIOResponse = await axios.get('http://localhost:5000/api/disk-io', {\r\n            params: { host, username, password },\r\n          });\r\n          if (diskIOResponse.data.success) {\r\n            setDiskIO(diskIOResponse.data.diskIO);\r\n          }\r\n\r\n          const networkTrafficResponse = await axios.get('http://localhost:5000/api/network-traffic', {\r\n            params: { host, username, password },\r\n          });\r\n          if (networkTrafficResponse.data.success) {\r\n            setNetworkTraffic(networkTrafficResponse.data.networkTraffic);\r\n          }\r\n\r\n          const innodbMetricsResponse = await axios.get('http://localhost:5000/api/innodb-metrics', {\r\n            params: { host, username, password },\r\n          });\r\n          if (innodbMetricsResponse.data.success) {\r\n            setInnodbMetrics(innodbMetricsResponse.data.innodbMetrics);\r\n          }\r\n        } catch (error) {\r\n          console.error('Error fetching SGBD data:', error);\r\n        } finally {\r\n          setLoading(false);\r\n        }\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>SGBD Overview</h1>\r\n      {performanceMetrics ? (\r\n        <div>\r\n          {/* Display SGBD Data */}\r\n          <p><strong>Threads Connected:</strong> {performanceMetrics.database.threadsConnected}</p>\r\n          <p><strong>Total Connections:</strong> {performanceMetrics.database.totalConnections}</p>\r\n          <p><strong>Uptime:</strong> {performanceMetrics.database.uptimeSeconds} seconds</p>\r\n          <p><strong>Memory Usage:</strong> {((performanceMetrics.system.memoryUsage.used / performanceMetrics.system.memoryUsage.total) * 100).toFixed(2)}%</p>\r\n          <p><strong>CPU Load:</strong> {performanceMetrics.system.cpuLoad}%</p>\r\n          \r\n          {/* Add the chart below the SGBD data */}\r\n          <SgbdMetricsChart data={sgbdData} />\r\n        </div>\r\n      ) : (\r\n        <p>Failed to load data</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SgbdOverview;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,gBAAgB,MAAM,oBAAoB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACW,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAClE,MAAM,CAACa,MAAM,EAAEC,SAAS,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACe,cAAc,EAAEC,iBAAiB,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACiB,aAAa,EAAEC,gBAAgB,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAEtDD,SAAS,CAAC,MAAM;IACd,MAAMoB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC,CAAC;MACrE,IAAIJ,WAAW,EAAE;QACf,MAAM;UAAEK,IAAI;UAAEC,QAAQ;UAAEC;QAAS,CAAC,GAAGP,WAAW;QAEhD,IAAI;UACF,MAAMQ,mBAAmB,GAAG,MAAM3B,KAAK,CAAC4B,GAAG,CAAC,+CAA+C,EAAE;YAC3FC,MAAM,EAAE;cAAEL,IAAI;cAAEC,QAAQ;cAAEC;YAAS;UACrC,CAAC,CAAC;UACF,IAAIC,mBAAmB,CAACG,IAAI,CAACC,OAAO,EAAE;YACpCpB,qBAAqB,CAACgB,mBAAmB,CAACG,IAAI,CAAC;UACjD;UAEA,MAAME,cAAc,GAAG,MAAMhC,KAAK,CAAC4B,GAAG,CAAC,mCAAmC,EAAE;YAC1EC,MAAM,EAAE;cAAEL,IAAI;cAAEC,QAAQ;cAAEC;YAAS;UACrC,CAAC,CAAC;UACF,IAAIM,cAAc,CAACF,IAAI,CAACC,OAAO,EAAE;YAC/BlB,SAAS,CAACmB,cAAc,CAACF,IAAI,CAAClB,MAAM,CAAC;UACvC;UAEA,MAAMqB,sBAAsB,GAAG,MAAMjC,KAAK,CAAC4B,GAAG,CAAC,2CAA2C,EAAE;YAC1FC,MAAM,EAAE;cAAEL,IAAI;cAAEC,QAAQ;cAAEC;YAAS;UACrC,CAAC,CAAC;UACF,IAAIO,sBAAsB,CAACH,IAAI,CAACC,OAAO,EAAE;YACvChB,iBAAiB,CAACkB,sBAAsB,CAACH,IAAI,CAAChB,cAAc,CAAC;UAC/D;UAEA,MAAMoB,qBAAqB,GAAG,MAAMlC,KAAK,CAAC4B,GAAG,CAAC,0CAA0C,EAAE;YACxFC,MAAM,EAAE;cAAEL,IAAI;cAAEC,QAAQ;cAAEC;YAAS;UACrC,CAAC,CAAC;UACF,IAAIQ,qBAAqB,CAACJ,IAAI,CAACC,OAAO,EAAE;YACtCd,gBAAgB,CAACiB,qBAAqB,CAACJ,IAAI,CAACd,aAAa,CAAC;UAC5D;QACF,CAAC,CAAC,OAAOmB,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;QACnD,CAAC,SAAS;UACR1B,UAAU,CAAC,KAAK,CAAC;QACnB;MACF;IACF,CAAC;IAEDS,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIV,OAAO,EAAE;IACX,oBAAOL,OAAA;MAAAkC,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC9B;EAEA,oBACEtC,OAAA;IAAAkC,QAAA,gBACElC,OAAA;MAAAkC,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACrB/B,kBAAkB,gBACjBP,OAAA;MAAAkC,QAAA,gBAEElC,OAAA;QAAAkC,QAAA,gBAAGlC,OAAA;UAAAkC,QAAA,EAAQ;QAAkB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC,EAAC/B,kBAAkB,CAACgC,QAAQ,CAACC,gBAAgB;MAAA;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACzFtC,OAAA;QAAAkC,QAAA,gBAAGlC,OAAA;UAAAkC,QAAA,EAAQ;QAAkB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC,EAAC/B,kBAAkB,CAACgC,QAAQ,CAACE,gBAAgB;MAAA;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACzFtC,OAAA;QAAAkC,QAAA,gBAAGlC,OAAA;UAAAkC,QAAA,EAAQ;QAAO;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC,EAAC/B,kBAAkB,CAACgC,QAAQ,CAACG,aAAa,EAAC,UAAQ;MAAA;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACnFtC,OAAA;QAAAkC,QAAA,gBAAGlC,OAAA;UAAAkC,QAAA,EAAQ;QAAa;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC,EAAC,CAAE/B,kBAAkB,CAACoC,MAAM,CAACC,WAAW,CAACC,IAAI,GAAGtC,kBAAkB,CAACoC,MAAM,CAACC,WAAW,CAACE,KAAK,GAAI,GAAG,EAAEC,OAAO,CAAC,CAAC,CAAC,EAAC,GAAC;MAAA;QAAAZ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACtJtC,OAAA;QAAAkC,QAAA,gBAAGlC,OAAA;UAAAkC,QAAA,EAAQ;QAAS;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,KAAC,EAAC/B,kBAAkB,CAACoC,MAAM,CAACK,OAAO,EAAC,GAAC;MAAA;QAAAb,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eAGtEtC,OAAA,CAACF,gBAAgB;QAAC6B,IAAI,EAAExB;MAAS;QAAAgC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjC,CAAC,gBAENtC,OAAA;MAAAkC,QAAA,EAAG;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAC1B;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACpC,EAAA,CA7EID,YAAY;AAAAgD,EAAA,GAAZhD,YAAY;AA+ElB,eAAeA,YAAY;AAAC,IAAAgD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}