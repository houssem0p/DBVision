{"ast":null,"code":"var _jsxFileName = \"D:\\\\DBVIsion\\\\dbvision\\\\src\\\\components\\\\MainPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ChartComponent, SeriesCollectionDirective, SeriesDirective, Inject, ColumnSeries, Legend, Tooltip, Category } from '@syncfusion/ej2-react-charts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DatabaseMetrics = () => {\n  _s();\n  const [metrics, setMetrics] = useState(null);\n  useEffect(() => {\n    const fetchMetrics = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/api/database-metrics?host=your-db-host&username=your-username&password=your-password&database=your-database');\n        const data = await response.json();\n        if (data.success) {\n          setMetrics(data.metrics);\n        }\n      } catch (error) {\n        console.error('Error fetching database metrics:', error);\n      }\n    };\n    fetchMetrics();\n  }, []);\n  if (!metrics) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading metrics...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 12\n    }, this);\n  }\n  const chartData = [{\n    metric: 'Database Size (MB)',\n    value: metrics.databaseSize\n  }, {\n    metric: 'CPU Usage (%)',\n    value: metrics.cpuUsage\n  }, {\n    metric: 'Memory Usage (%)',\n    value: metrics.memoryUsage\n  }];\n  return /*#__PURE__*/_jsxDEV(ChartComponent, {\n    id: \"charts\",\n    primaryXAxis: {\n      valueType: 'Category',\n      title: 'Metrics'\n    },\n    primaryYAxis: {\n      title: 'Values'\n    },\n    title: \"Database Metrics\",\n    tooltip: {\n      enable: true\n    },\n    children: [/*#__PURE__*/_jsxDEV(Inject, {\n      services: [ColumnSeries, Legend, Tooltip, Category]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SeriesCollectionDirective, {\n      children: /*#__PURE__*/_jsxDEV(SeriesDirective, {\n        dataSource: chartData,\n        xName: \"metric\",\n        yName: \"value\",\n        type: \"Column\",\n        name: \"Metrics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(DatabaseMetrics, \"fkAZCjMJDoW80OvZsNTeiaw81+c=\");\n_c = DatabaseMetrics;\nexport default DatabaseMetrics;\nvar _c;\n$RefreshReg$(_c, \"DatabaseMetrics\");","map":{"version":3,"names":["React","useState","useEffect","ChartComponent","SeriesCollectionDirective","SeriesDirective","Inject","ColumnSeries","Legend","Tooltip","Category","jsxDEV","_jsxDEV","DatabaseMetrics","_s","metrics","setMetrics","fetchMetrics","response","fetch","data","json","success","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","chartData","metric","value","databaseSize","cpuUsage","memoryUsage","id","primaryXAxis","valueType","title","primaryYAxis","tooltip","enable","services","dataSource","xName","yName","type","name","_c","$RefreshReg$"],"sources":["D:/DBVIsion/dbvision/src/components/MainPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { ChartComponent, SeriesCollectionDirective, SeriesDirective, Inject, ColumnSeries, Legend, Tooltip, Category } from '@syncfusion/ej2-react-charts';\r\n\r\nconst DatabaseMetrics = () => {\r\n  const [metrics, setMetrics] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchMetrics = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:5000/api/database-metrics?host=your-db-host&username=your-username&password=your-password&database=your-database');\r\n        const data = await response.json();\r\n        if (data.success) {\r\n          setMetrics(data.metrics);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching database metrics:', error);\r\n      }\r\n    };\r\n\r\n    fetchMetrics();\r\n  }, []);\r\n\r\n  if (!metrics) {\r\n    return <div>Loading metrics...</div>;\r\n  }\r\n\r\n  const chartData = [\r\n    { metric: 'Database Size (MB)', value: metrics.databaseSize },\r\n    { metric: 'CPU Usage (%)', value: metrics.cpuUsage },\r\n    { metric: 'Memory Usage (%)', value: metrics.memoryUsage },\r\n  ];\r\n\r\n  return (\r\n    <ChartComponent\r\n      id=\"charts\"\r\n      primaryXAxis={{ valueType: 'Category', title: 'Metrics' }}\r\n      primaryYAxis={{ title: 'Values' }}\r\n      title=\"Database Metrics\"\r\n      tooltip={{ enable: true }}\r\n    >\r\n      <Inject services={[ColumnSeries, Legend, Tooltip, Category]} />\r\n      <SeriesCollectionDirective>\r\n        <SeriesDirective dataSource={chartData} xName=\"metric\" yName=\"value\" type=\"Column\" name=\"Metrics\" />\r\n      </SeriesCollectionDirective>\r\n    </ChartComponent>\r\n  );\r\n};\r\n\r\nexport default DatabaseMetrics;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,cAAc,EAAEC,yBAAyB,EAAEC,eAAe,EAAEC,MAAM,EAAEC,YAAY,EAAEC,MAAM,EAAEC,OAAO,EAAEC,QAAQ,QAAQ,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3J,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd,MAAMe,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,mIAAmI,CAAC;QACjK,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAClC,IAAID,IAAI,CAACE,OAAO,EAAE;UAChBN,UAAU,CAACI,IAAI,CAACL,OAAO,CAAC;QAC1B;MACF,CAAC,CAAC,OAAOQ,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MAC1D;IACF,CAAC;IAEDN,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,IAAI,CAACF,OAAO,EAAE;IACZ,oBAAOH,OAAA;MAAAa,QAAA,EAAK;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACtC;EAEA,MAAMC,SAAS,GAAG,CAChB;IAAEC,MAAM,EAAE,oBAAoB;IAAEC,KAAK,EAAEjB,OAAO,CAACkB;EAAa,CAAC,EAC7D;IAAEF,MAAM,EAAE,eAAe;IAAEC,KAAK,EAAEjB,OAAO,CAACmB;EAAS,CAAC,EACpD;IAAEH,MAAM,EAAE,kBAAkB;IAAEC,KAAK,EAAEjB,OAAO,CAACoB;EAAY,CAAC,CAC3D;EAED,oBACEvB,OAAA,CAACT,cAAc;IACbiC,EAAE,EAAC,QAAQ;IACXC,YAAY,EAAE;MAAEC,SAAS,EAAE,UAAU;MAAEC,KAAK,EAAE;IAAU,CAAE;IAC1DC,YAAY,EAAE;MAAED,KAAK,EAAE;IAAS,CAAE;IAClCA,KAAK,EAAC,kBAAkB;IACxBE,OAAO,EAAE;MAAEC,MAAM,EAAE;IAAK,CAAE;IAAAjB,QAAA,gBAE1Bb,OAAA,CAACN,MAAM;MAACqC,QAAQ,EAAE,CAACpC,YAAY,EAAEC,MAAM,EAAEC,OAAO,EAAEC,QAAQ;IAAE;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC/DjB,OAAA,CAACR,yBAAyB;MAAAqB,QAAA,eACxBb,OAAA,CAACP,eAAe;QAACuC,UAAU,EAAEd,SAAU;QAACe,KAAK,EAAC,QAAQ;QAACC,KAAK,EAAC,OAAO;QAACC,IAAI,EAAC,QAAQ;QAACC,IAAI,EAAC;MAAS;QAAAtB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3E,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACd,CAAC;AAErB,CAAC;AAACf,EAAA,CA3CID,eAAe;AAAAoC,EAAA,GAAfpC,eAAe;AA6CrB,eAAeA,eAAe;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}