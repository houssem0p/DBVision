{"ast":null,"code":"useEffect(() => {\n  fetch('http://localhost:5000/api/database-metrics').then(response => response.json()).then(data => {\n    console.log('API response', data);\n    if (data.success) {\n      const metrics = data.metrics;\n      if (metrics.length > 0) {\n        setData(metrics);\n        setChartData({\n          barChart: {\n            series: [{\n              name: 'Metric Value',\n              data: metrics.map(item => item.value)\n            }],\n            options: {\n              ...chartData.barChart.options,\n              xaxis: {\n                categories: metrics.map(item => item.name)\n              }\n            }\n          }\n        });\n      } else {\n        console.error('No metrics data received');\n      }\n    } else {\n      console.error('API returned an error:', data.message);\n    }\n  }).catch(err => console.error('Error fetching data:', err));\n}, []);","map":{"version":3,"names":["useEffect","fetch","then","response","json","data","console","log","success","metrics","length","setData","setChartData","barChart","series","name","map","item","value","options","chartData","xaxis","categories","error","message","catch","err"],"sources":["D:/DBVision/dbvision/src/components/MainPage.jsx"],"sourcesContent":["useEffect(() => {\r\n  fetch('http://localhost:5000/api/database-metrics')\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      console.log('API response', data);\r\n      if (data.success) {\r\n        const metrics = data.metrics;\r\n        if (metrics.length > 0) {\r\n          setData(metrics);\r\n          setChartData({\r\n            barChart: {\r\n              series: [{ name: 'Metric Value', data: metrics.map((item) => item.value) }],\r\n              options: {\r\n                ...chartData.barChart.options,\r\n                xaxis: { categories: metrics.map((item) => item.name) },\r\n              },\r\n            },\r\n          });\r\n        } else {\r\n          console.error('No metrics data received');\r\n        }\r\n      } else {\r\n        console.error('API returned an error:', data.message);\r\n      }\r\n    })\r\n    .catch((err) => console.error('Error fetching data:', err));\r\n}, []);\r\n"],"mappings":"AAAAA,SAAS,CAAC,MAAM;EACdC,KAAK,CAAC,4CAA4C,CAAC,CAChDC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAK;IACdC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEF,IAAI,CAAC;IACjC,IAAIA,IAAI,CAACG,OAAO,EAAE;MAChB,MAAMC,OAAO,GAAGJ,IAAI,CAACI,OAAO;MAC5B,IAAIA,OAAO,CAACC,MAAM,GAAG,CAAC,EAAE;QACtBC,OAAO,CAACF,OAAO,CAAC;QAChBG,YAAY,CAAC;UACXC,QAAQ,EAAE;YACRC,MAAM,EAAE,CAAC;cAAEC,IAAI,EAAE,cAAc;cAAEV,IAAI,EAAEI,OAAO,CAACO,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,KAAK;YAAE,CAAC,CAAC;YAC3EC,OAAO,EAAE;cACP,GAAGC,SAAS,CAACP,QAAQ,CAACM,OAAO;cAC7BE,KAAK,EAAE;gBAAEC,UAAU,EAAEb,OAAO,CAACO,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACF,IAAI;cAAE;YACxD;UACF;QACF,CAAC,CAAC;MACJ,CAAC,MAAM;QACLT,OAAO,CAACiB,KAAK,CAAC,0BAA0B,CAAC;MAC3C;IACF,CAAC,MAAM;MACLjB,OAAO,CAACiB,KAAK,CAAC,wBAAwB,EAAElB,IAAI,CAACmB,OAAO,CAAC;IACvD;EACF,CAAC,CAAC,CACDC,KAAK,CAAEC,GAAG,IAAKpB,OAAO,CAACiB,KAAK,CAAC,sBAAsB,EAAEG,GAAG,CAAC,CAAC;AAC/D,CAAC,EAAE,EAAE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}