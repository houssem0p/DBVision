{"ast":null,"code":"var _jsxFileName = \"D:\\\\DBVision\\\\dbvision\\\\src\\\\components\\\\LoginPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst DashboardChoicePage = () => {\n  _s();\n  const [databases, setDatabases] = useState([]);\n  const [selectedDb, setSelectedDb] = useState('');\n  const [error, setError] = useState('');\n  const [isDbDashboard, setIsDbDashboard] = useState(false);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const fetchDatabases = async () => {\n      try {\n        const dbCredentials = JSON.parse(localStorage.getItem('dbCredentials'));\n        const response = await axios.get('http://localhost:5000/api/get-databases', {\n          params: {\n            host: dbCredentials.host,\n            username: dbCredentials.username,\n            password: dbCredentials.password\n          }\n        });\n        setDatabases(response.data.databases);\n      } catch (error) {\n        console.error('Error fetching databases:', error);\n        setError('Failed to load databases.');\n      }\n    };\n    if (isDbDashboard) {\n      fetchDatabases();\n    }\n  }, [isDbDashboard]);\n  const handleChoice = choice => {\n    if (choice === 'sgbd') {\n      navigate('/sgbd-overview'); // Navigate to the SGBD Dashboard\n    } else if (choice === 'database') {\n      setIsDbDashboard(true); // Show database selection\n    }\n  };\n  const handleSubmitDatabase = () => {\n    if (selectedDb) {\n      // Store the selected database in localStorage\n      localStorage.setItem('selectedDb', selectedDb);\n      // Proceed to MainPage with the selected database\n      navigate('/main'); // MainPage is your \"Database Dashboard\"\n    } else {\n      setError('Please select a database.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex justify-center items-center h-screen bg-gray-800 text-white\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-3xl font-bold mb-6\",\n        children: \"Choose Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), !isDbDashboard ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"bg-purple-600 px-6 py-3 mb-4 text-white rounded-lg w-full hover:bg-purple-700 transition\",\n            onClick: () => handleChoice('sgbd'),\n            children: \"SGBD Dashboard\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"bg-blue-600 px-6 py-3 text-white rounded-lg w-full hover:bg-blue-700 transition\",\n            onClick: () => handleChoice('database'),\n            children: \"Database Dashboard\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-xl font-bold mb-4\",\n          children: \"Select a Database\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-red-500 mb-4\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"w-full p-3 bg-gray-700 text-white rounded-lg mb-6\",\n          value: selectedDb,\n          onChange: e => setSelectedDb(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select a database\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 15\n          }, this), databases.map((db, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: db,\n            children: db\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSubmitDatabase,\n          className: \"bg-blue-600 px-6 py-3 text-white rounded-lg w-full hover:bg-blue-700 transition\",\n          children: \"Go to Database Dashboard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n_s(DashboardChoicePage, \"nf2GRiuc0s8QDGDDqMP3zbY5bys=\", false, function () {\n  return [useNavigate];\n});\n_c = DashboardChoicePage;\nexport default DashboardChoicePage;\nvar _c;\n$RefreshReg$(_c, \"DashboardChoicePage\");","map":{"version":3,"names":["React","useState","useEffect","axios","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","DashboardChoicePage","_s","databases","setDatabases","selectedDb","setSelectedDb","error","setError","isDbDashboard","setIsDbDashboard","navigate","fetchDatabases","dbCredentials","JSON","parse","localStorage","getItem","response","get","params","host","username","password","data","console","handleChoice","choice","handleSubmitDatabase","setItem","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","value","onChange","e","target","map","db","index","_c","$RefreshReg$"],"sources":["D:/DBVision/dbvision/src/components/LoginPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst DashboardChoicePage = () => {\r\n  const [databases, setDatabases] = useState([]);\r\n  const [selectedDb, setSelectedDb] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [isDbDashboard, setIsDbDashboard] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const fetchDatabases = async () => {\r\n      try {\r\n        const dbCredentials = JSON.parse(localStorage.getItem('dbCredentials'));\r\n        const response = await axios.get('http://localhost:5000/api/get-databases', {\r\n          params: {\r\n            host: dbCredentials.host,\r\n            username: dbCredentials.username,\r\n            password: dbCredentials.password,\r\n          },\r\n        });\r\n        setDatabases(response.data.databases);\r\n      } catch (error) {\r\n        console.error('Error fetching databases:', error);\r\n        setError('Failed to load databases.');\r\n      }\r\n    };\r\n\r\n    if (isDbDashboard) {\r\n      fetchDatabases();\r\n    }\r\n  }, [isDbDashboard]);\r\n\r\n  const handleChoice = (choice) => {\r\n    if (choice === 'sgbd') {\r\n      navigate('/sgbd-overview'); // Navigate to the SGBD Dashboard\r\n    } else if (choice === 'database') {\r\n      setIsDbDashboard(true); // Show database selection\r\n    }\r\n  };\r\n\r\n  const handleSubmitDatabase = () => {\r\n    if (selectedDb) {\r\n      // Store the selected database in localStorage\r\n      localStorage.setItem('selectedDb', selectedDb);\r\n      // Proceed to MainPage with the selected database\r\n      navigate('/main'); // MainPage is your \"Database Dashboard\"\r\n    } else {\r\n      setError('Please select a database.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex justify-center items-center h-screen bg-gray-800 text-white\">\r\n      <div className=\"text-center\">\r\n        <h2 className=\"text-3xl font-bold mb-6\">Choose Dashboard</h2>\r\n        {!isDbDashboard ? (\r\n          <>\r\n            <div>\r\n              <button\r\n                className=\"bg-purple-600 px-6 py-3 mb-4 text-white rounded-lg w-full hover:bg-purple-700 transition\"\r\n                onClick={() => handleChoice('sgbd')}\r\n              >\r\n                SGBD Dashboard\r\n              </button>\r\n            </div>\r\n            <div>\r\n              <button\r\n                className=\"bg-blue-600 px-6 py-3 text-white rounded-lg w-full hover:bg-blue-700 transition\"\r\n                onClick={() => handleChoice('database')}\r\n              >\r\n                Database Dashboard\r\n              </button>\r\n            </div>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <h3 className=\"text-xl font-bold mb-4\">Select a Database</h3>\r\n            {error && <p className=\"text-red-500 mb-4\">{error}</p>}\r\n            <select\r\n              className=\"w-full p-3 bg-gray-700 text-white rounded-lg mb-6\"\r\n              value={selectedDb}\r\n              onChange={(e) => setSelectedDb(e.target.value)}\r\n            >\r\n              <option value=\"\">Select a database</option>\r\n              {databases.map((db, index) => (\r\n                <option key={index} value={db}>\r\n                  {db}\r\n                </option>\r\n              ))}\r\n            </select>\r\n            <button\r\n              onClick={handleSubmitDatabase}\r\n              className=\"bg-blue-600 px-6 py-3 text-white rounded-lg w-full hover:bg-blue-700 transition\"\r\n            >\r\n              Go to Database Dashboard\r\n            </button>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DashboardChoicePage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}